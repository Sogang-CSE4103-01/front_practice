"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.VoiceControlDecorator = void 0;
var _react = require("react");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _hoc = _interopRequireDefault(require("@enact/core/hoc"));
var _WithRef = require("@enact/core/internal/WithRef");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); } /**
 * VoiceControlDecorator is a higher-order component that adds a callback for voice event
 * to its wrapped component.
 *
 * By default, `onVoice` handler will be added to the node where `data-webos-voice-intent` attribute is declared.
 * In addition, if you need to specify a target node, `data-webos-voice-event-target` attribute can be used.
 *
 * Usage:
 * ```
 * import {Component} from 'react';
 * import Item from '@enact/moonstone/Item';
 * import {VoiceControlDecorator} from '@enact/webos/speech';
 *
 * const VoiceDiv = VoiceControlDecorator('div');
 * const VoiceItem = VoiceControlDecorator(Item);
 *
 * class Sample extends Component {
 *   handlePlayListControl = (e) => {
 *     const {intent, control} = e.detail;
 *     // Change the app status refer to the `control` value.
 *   }
 *
 *   handlePlayContent = (e) => {
 *     const {intent, value} = e.detail;
 *     // Play content
 *   }
 *
 *   render () {
 *     return(
 *       <div>
 *         <VoiceDiv
 *           data-webos-voice-intent='PlayListControl'
 *           onVoice={this.handlePlayListControl}
 *         />
 *         <VoiceItem
 *           data-webos-voice-intent='Select PlayContent'
 *           onVoice={this.handlePlayContent}
 *         >
 *           The Dark Knight
 *         </VoiceItem>
 *       </div>
 *     );
 *   }
 * }
 * ```
 *
 * @class VoiceControlDecorator
 * @memberof webos/speech
 * @hoc
 * @public
 */
var VoiceControlDecorator = exports.VoiceControlDecorator = (0, _hoc["default"])(function (config, Wrapped) {
  var _class;
  var WithRefComponent = (0, _WithRef.WithRef)(Wrapped);
  return _class = /*#__PURE__*/function (_Component) {
    _inherits(_class, _Component);
    var _super = _createSuper(_class);
    function _class(props) {
      var _this;
      _classCallCheck(this, _class);
      _this = _super.call(this, props);
      _this.node = null;
      _this.nodeRef = /*#__PURE__*/(0, _react.createRef)();
      return _this;
    }
    _createClass(_class, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.node = this.nodeRef.current;
        if (this.node && !(this.node.hasAttribute('data-webos-voice-event-target') || this.node.hasAttribute('data-webos-voice-intent'))) {
          this.node = this.node.querySelector('[data-webos-voice-event-target]') || this.node.querySelector('[data-webos-voice-intent]');
        }
        if (this.node) this.node.addEventListener('webOSVoice', this.props.onVoice);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this.node) this.node.removeEventListener('webOSVoice', this.props.onVoice);
      }
    }, {
      key: "render",
      value: function render() {
        var props = _objectSpread({}, this.props);
        delete props.onVoice;
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(WithRefComponent, _objectSpread(_objectSpread({}, props), {}, {
          outermostRef: this.nodeRef,
          referrerName: "VoiceControlDecorator"
        }));
      }
    }]);
    return _class;
  }(_react.Component), _class.displayName = 'VoiceControlDecorator', _class.propTypes = /** @lends webos/speech.VoiceControlDecorator.prototype */{
    /**
     * Callback to be executed when a wrapped element's `data-webos-voice-intent` is activated.
     *
     * @type {Function}
     * @required
     * @public
     */
    onVoice: _propTypes["default"].func.isRequired
  }, _class;
});
var _default = exports["default"] = VoiceControlDecorator;