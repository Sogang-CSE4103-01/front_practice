{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.select = exports.isSelected = void 0;\nvar _curry = _interopRequireDefault(require(\"ramda/src/curry\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/**\n * Determines if `item` is selected\n *\n * @param\t{*}\t\t\titem\t\tUsually a number but could be anything within the `selected` list\n * @param\t{*|Array}\tselected\tOne or many selected items\n *\n * @returns\t{Boolean}\t\t\t\t`true` if item is equal to or contained in `selected`\n * @private\n */\nvar isSelected = exports.isSelected = (0, _curry[\"default\"])(function (item, selected) {\n  return item === selected || Array.isArray(selected) && selected.indexOf(item) >= 0;\n});\n\n/**\n * Selects or deselects an `item` based on the `mode` and returns a copy of `selected` with the new\n * selected state.\n *\n * `single` - Toggles the selection state of `item`. Always returns either `item` or null.\n * `radio` - Always selects `item`\n * `multiple` - Toggles the selection state `item` like `single` but doesn't replace other selected\n * items.\n *\n * @param\t{String}\tmode\t\tSelection mode (`single`, `radio`, or `multiple`)\n * @param\t{*}\t\t\titem\t\tThe selected item\n * @param\t{*|Array}\tselected\tThe current selection\n *\n * @returns {*|Array}\t\t\t\tThe updated selection\n * @private\n */\nvar select = exports.select = (0, _curry[\"default\"])(function (mode, item, selected) {\n  if (mode === 'radio') {\n    // When selection is disabled, when selecting only 1, or when selecting the\n    // first of multiple, we can forward the source event as is.\n    return item;\n  } else if (mode === 'single') {\n    // When selecting 0 or 1, we have to unselect it if selected\n    return isSelected(item, selected) ? null : item;\n  } else if (selected == null) {\n    // When selection 0 or n but no prior selection, wrap item in an array\n    return [item];\n  } else {\n    // Otherwise we're selecting multiple so we have to either deselect it if\n    // already selected or select it if not.\n    var updated = Array.isArray(selected) ? selected.slice() : [selected];\n    var index = updated.indexOf(item);\n    if (index >= 0) {\n      if (updated.length === 1) {\n        // item should be deselected and is the only item in the array so return null\n        updated = null;\n      } else {\n        // otherwise there are multiple selected so remove item\n        updated.splice(index, 1);\n      }\n    } else {\n      // insert and sort\n      updated.push(item);\n      updated = updated.sort(function (a, b) {\n        return a - b;\n      });\n    }\n    return updated;\n  }\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","select","isSelected","_curry","_interopRequireDefault","require","obj","__esModule","item","selected","Array","isArray","indexOf","mode","updated","slice","index","length","splice","push","sort","a","b"],"sources":["/home/connected/enact-template/node_modules/@enact/ui/internal/selection/selection.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.select = exports.isSelected = void 0;\nvar _curry = _interopRequireDefault(require(\"ramda/src/curry\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n/**\n * Determines if `item` is selected\n *\n * @param\t{*}\t\t\titem\t\tUsually a number but could be anything within the `selected` list\n * @param\t{*|Array}\tselected\tOne or many selected items\n *\n * @returns\t{Boolean}\t\t\t\t`true` if item is equal to or contained in `selected`\n * @private\n */\nvar isSelected = exports.isSelected = (0, _curry[\"default\"])(function (item, selected) {\n  return item === selected || Array.isArray(selected) && selected.indexOf(item) >= 0;\n});\n\n/**\n * Selects or deselects an `item` based on the `mode` and returns a copy of `selected` with the new\n * selected state.\n *\n * `single` - Toggles the selection state of `item`. Always returns either `item` or null.\n * `radio` - Always selects `item`\n * `multiple` - Toggles the selection state `item` like `single` but doesn't replace other selected\n * items.\n *\n * @param\t{String}\tmode\t\tSelection mode (`single`, `radio`, or `multiple`)\n * @param\t{*}\t\t\titem\t\tThe selected item\n * @param\t{*|Array}\tselected\tThe current selection\n *\n * @returns {*|Array}\t\t\t\tThe updated selection\n * @private\n */\nvar select = exports.select = (0, _curry[\"default\"])(function (mode, item, selected) {\n  if (mode === 'radio') {\n    // When selection is disabled, when selecting only 1, or when selecting the\n    // first of multiple, we can forward the source event as is.\n    return item;\n  } else if (mode === 'single') {\n    // When selecting 0 or 1, we have to unselect it if selected\n    return isSelected(item, selected) ? null : item;\n  } else if (selected == null) {\n    // When selection 0 or n but no prior selection, wrap item in an array\n    return [item];\n  } else {\n    // Otherwise we're selecting multiple so we have to either deselect it if\n    // already selected or select it if not.\n    var updated = Array.isArray(selected) ? selected.slice() : [selected];\n    var index = updated.indexOf(item);\n    if (index >= 0) {\n      if (updated.length === 1) {\n        // item should be deselected and is the only item in the array so return null\n        updated = null;\n      } else {\n        // otherwise there are multiple selected so remove item\n        updated.splice(index, 1);\n      }\n    } else {\n      // insert and sort\n      updated.push(item);\n      updated = updated.sort(function (a, b) {\n        return a - b;\n      });\n    }\n    return updated;\n  }\n});"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,MAAM,GAAGF,OAAO,CAACG,UAAU,GAAG,KAAK,CAAC;AAC5C,IAAIC,MAAM,GAAGC,sBAAsB,CAACC,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAC/D,SAASD,sBAAsBA,CAACE,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAAE;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIJ,UAAU,GAAGH,OAAO,CAACG,UAAU,GAAG,CAAC,CAAC,EAAEC,MAAM,CAAC,SAAS,CAAC,EAAE,UAAUK,IAAI,EAAEC,QAAQ,EAAE;EACrF,OAAOD,IAAI,KAAKC,QAAQ,IAAIC,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,IAAIA,QAAQ,CAACG,OAAO,CAACJ,IAAI,CAAC,IAAI,CAAC;AACpF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIP,MAAM,GAAGF,OAAO,CAACE,MAAM,GAAG,CAAC,CAAC,EAAEE,MAAM,CAAC,SAAS,CAAC,EAAE,UAAUU,IAAI,EAAEL,IAAI,EAAEC,QAAQ,EAAE;EACnF,IAAII,IAAI,KAAK,OAAO,EAAE;IACpB;IACA;IACA,OAAOL,IAAI;EACb,CAAC,MAAM,IAAIK,IAAI,KAAK,QAAQ,EAAE;IAC5B;IACA,OAAOX,UAAU,CAACM,IAAI,EAAEC,QAAQ,CAAC,GAAG,IAAI,GAAGD,IAAI;EACjD,CAAC,MAAM,IAAIC,QAAQ,IAAI,IAAI,EAAE;IAC3B;IACA,OAAO,CAACD,IAAI,CAAC;EACf,CAAC,MAAM;IACL;IACA;IACA,IAAIM,OAAO,GAAGJ,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,GAAGA,QAAQ,CAACM,KAAK,CAAC,CAAC,GAAG,CAACN,QAAQ,CAAC;IACrE,IAAIO,KAAK,GAAGF,OAAO,CAACF,OAAO,CAACJ,IAAI,CAAC;IACjC,IAAIQ,KAAK,IAAI,CAAC,EAAE;MACd,IAAIF,OAAO,CAACG,MAAM,KAAK,CAAC,EAAE;QACxB;QACAH,OAAO,GAAG,IAAI;MAChB,CAAC,MAAM;QACL;QACAA,OAAO,CAACI,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;MAC1B;IACF,CAAC,MAAM;MACL;MACAF,OAAO,CAACK,IAAI,CAACX,IAAI,CAAC;MAClBM,OAAO,GAAGA,OAAO,CAACM,IAAI,CAAC,UAAUC,CAAC,EAAEC,CAAC,EAAE;QACrC,OAAOD,CAAC,GAAGC,CAAC;MACd,CAAC,CAAC;IACJ;IACA,OAAOR,OAAO;EAChB;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}