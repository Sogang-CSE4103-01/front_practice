{"ast":null,"code":"var _jsxFileName = \"/home/connected/enact-template/src/views/Main.js\";\n// src/views/Main.js\n/*\nimport BodyText from '@enact/sandstone/BodyText';\nimport { Header, Panel } from '@enact/sandstone/Panels';\nimport { useMainState } from './MainState';\nimport SelectableVideoPlayer from './VideoPlayer'; // SelectableVideoPlayer 컴포넌트 import\nimport css from './Main.module.less';\nimport $L from '@enact/i18n/$L';\nimport { useState } from 'react';\nimport Scroller from '@enact/sandstone/Scroller';\n\nconst Main = (props) => {\n    const { videoData } = useMainState();\n    const [selectedVideo, setSelectedVideo] = useState(null); // 선택된 비디오 상태\n\n    const watchingVideos = videoData.slice(0, 3);\n    const recommendedVideos = videoData.slice(3, 9);\n\n    const handleVideoClick = (video) => {\n        setSelectedVideo(video);\n    };\n\n    const handleClosePlayer = () => {\n        setSelectedVideo(null);\n    };\n\n    const renderVideoCard = (video) => (\n        <div key={video.id} className={css.videoCard} onClick={() => handleVideoClick(video)}>\n            <img src={video.thumbnail} alt={video.title} className={css.thumbnail} />\n            <BodyText className={css.videoTitle} size=\"medium\">\n                {video.title}\n            </BodyText>\n        </div>\n    );\n\n    return (\n        <Panel {...props}>\n\n            <Header title={$L('Media Web App')} />\n            <BodyText className={css.description} size=\"large\">\n                {$L('Connected Group 8')}\n            </BodyText>\n\n            {selectedVideo && (\n                <SelectableVideoPlayer video={selectedVideo} onClose={handleClosePlayer} />\n            )}\n\n            <Scroller\n            verticalScrollbar=\"auto\" // 자동 스크롤바\n            focusableScrollbar // 포커스 가능한 스크롤바\n            disabled={selectedVideo}\n            >\n\n            <div className={css.section}>\n                <BodyText className={css.sectionTitle} size=\"large\">\n                    {$L('시청중인 영상')}\n                </BodyText>\n\n                <Scroller\n                    horizontalScrollbar=\"auto\" // 가로 스크롤\n                    focusableScrollbar\n                    className={css.horizontalScroller}\n                >\n                <div className={css.videoGrid}>\n                    {watchingVideos.map(renderVideoCard)}\n                </div>\n                </Scroller>\n            </div>\n\n            <div className={css.section}>\n                <BodyText className={css.sectionTitle} size=\"large\">\n                    {$L('추천 영상')}\n                </BodyText>\n                <Scroller\n                    horizontalScrollbar=\"auto\" // 가로 스크롤\n                    focusableScrollbar\n                    className={css.horizontalScroller}\n                >\n                <div className={css.videoGrid}>\n                    {recommendedVideos.map(renderVideoCard)}\n                </div>\n                </Scroller>\n            </div>\n            </Scroller>\n        </Panel>\n    );\n};\n\nexport default Main;*/\n\nimport BodyText from '@enact/sandstone/BodyText';\nimport { Header, Panel } from '@enact/sandstone/Panels';\nimport { useMainState } from './MainState';\nimport SelectableVideoPlayer from './VideoPlayer';\nimport css from './Main.module.less';\nimport $L from '@enact/i18n/$L';\nimport { useState, useEffect, useRef } from 'react';\nimport Scroller from '@enact/sandstone/Scroller';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Main = props => {\n  const {\n    videoData\n  } = useMainState();\n  const [selectedVideo, setSelectedVideo] = useState(null); // 선택된 비디오 상태\n  const [watchingVideos, setWatchingVideos] = useState(videoData.slice(0, 3)); // 초기 시청 중인 영상\n  const recommendedVideos = videoData.slice(3, 9); // 추천 영상\n\n  const scrollerRef = useRef(null);\n\n  // 무한 스크롤: 가로 스크롤에서 추가 데이터 로드\n  const loadMoreVideos = () => {\n    const currentLength = watchingVideos.length;\n    const newVideos = videoData.slice(currentLength, currentLength + 3);\n    if (newVideos.length > 0) {\n      setWatchingVideos([...watchingVideos, ...newVideos]);\n    }\n  };\n  const handleScroll = () => {\n    const scrollerNode = scrollerRef.current.getBoundingClientRect();\n    if (scrollerNode.right <= window.innerWidth + 50) {\n      loadMoreVideos();\n    }\n  };\n  const handleVideoClick = video => {\n    setSelectedVideo(video);\n  };\n  const handleClosePlayer = () => {\n    setSelectedVideo(null);\n  };\n  const renderVideoCard = video => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: css.videoCard,\n    onClick: () => handleVideoClick(video),\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: video.thumbnail,\n      alt: video.title,\n      className: css.thumbnail\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(BodyText, {\n      className: css.videoTitle,\n      size: \"medium\",\n      children: video.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this)]\n  }, video.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 9\n  }, this);\n  useEffect(() => {\n    const scrollerNode = scrollerRef.current;\n    scrollerNode.addEventListener('scroll', handleScroll);\n    return () => {\n      scrollerNode.removeEventListener('scroll', handleScroll);\n    };\n  }, [watchingVideos]);\n  return /*#__PURE__*/_jsxDEV(Panel, {\n    ...props,\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      title: $L('Media Web App')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(BodyText, {\n      className: css.description,\n      size: \"large\",\n      children: $L('Connected Group 8')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this), selectedVideo && /*#__PURE__*/_jsxDEV(SelectableVideoPlayer, {\n      video: selectedVideo,\n      onClose: handleClosePlayer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Scroller, {\n      verticalScrollbar: \"auto\",\n      focusableScrollbar: true,\n      disabled: !!selectedVideo,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: css.section,\n        children: [/*#__PURE__*/_jsxDEV(BodyText, {\n          className: css.sectionTitle,\n          size: \"large\",\n          children: $L('시청중인 영상')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Scroller, {\n          ref: scrollerRef,\n          horizontalScrollbar: \"auto\",\n          focusableScrollbar: true,\n          className: css.horizontalScroller,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: css.videoGridHorizontal,\n            children: watchingVideos.map(renderVideoCard)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: css.section,\n        children: [/*#__PURE__*/_jsxDEV(BodyText, {\n          className: css.sectionTitle,\n          size: \"large\",\n          children: $L('추천 영상')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Scroller, {\n          horizontalScrollbar: \"auto\",\n          focusableScrollbar: true,\n          className: css.horizontalScroller,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: css.videoGridHorizontal,\n            children: recommendedVideos.map(renderVideoCard)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 9\n  }, this);\n};\nexport default Main;","map":{"version":3,"names":["BodyText","Header","Panel","useMainState","SelectableVideoPlayer","css","$L","useState","useEffect","useRef","Scroller","jsxDEV","_jsxDEV","Main","props","videoData","selectedVideo","setSelectedVideo","watchingVideos","setWatchingVideos","slice","recommendedVideos","scrollerRef","loadMoreVideos","currentLength","length","newVideos","handleScroll","scrollerNode","current","getBoundingClientRect","right","window","innerWidth","handleVideoClick","video","handleClosePlayer","renderVideoCard","className","videoCard","onClick","children","src","thumbnail","alt","title","fileName","_jsxFileName","lineNumber","columnNumber","videoTitle","size","id","addEventListener","removeEventListener","description","onClose","verticalScrollbar","focusableScrollbar","disabled","section","sectionTitle","ref","horizontalScrollbar","horizontalScroller","videoGridHorizontal","map"],"sources":["/home/connected/enact-template/src/views/Main.js"],"sourcesContent":["// src/views/Main.js\n/*\nimport BodyText from '@enact/sandstone/BodyText';\nimport { Header, Panel } from '@enact/sandstone/Panels';\nimport { useMainState } from './MainState';\nimport SelectableVideoPlayer from './VideoPlayer'; // SelectableVideoPlayer 컴포넌트 import\nimport css from './Main.module.less';\nimport $L from '@enact/i18n/$L';\nimport { useState } from 'react';\nimport Scroller from '@enact/sandstone/Scroller';\n\nconst Main = (props) => {\n    const { videoData } = useMainState();\n    const [selectedVideo, setSelectedVideo] = useState(null); // 선택된 비디오 상태\n\n    const watchingVideos = videoData.slice(0, 3);\n    const recommendedVideos = videoData.slice(3, 9);\n\n    const handleVideoClick = (video) => {\n        setSelectedVideo(video);\n    };\n\n    const handleClosePlayer = () => {\n        setSelectedVideo(null);\n    };\n\n    const renderVideoCard = (video) => (\n        <div key={video.id} className={css.videoCard} onClick={() => handleVideoClick(video)}>\n            <img src={video.thumbnail} alt={video.title} className={css.thumbnail} />\n            <BodyText className={css.videoTitle} size=\"medium\">\n                {video.title}\n            </BodyText>\n        </div>\n    );\n\n    return (\n        <Panel {...props}>\n\n            <Header title={$L('Media Web App')} />\n            <BodyText className={css.description} size=\"large\">\n                {$L('Connected Group 8')}\n            </BodyText>\n\n            {selectedVideo && (\n                <SelectableVideoPlayer video={selectedVideo} onClose={handleClosePlayer} />\n            )}\n\n            <Scroller\n            verticalScrollbar=\"auto\" // 자동 스크롤바\n            focusableScrollbar // 포커스 가능한 스크롤바\n            disabled={selectedVideo}\n            >\n\n            <div className={css.section}>\n                <BodyText className={css.sectionTitle} size=\"large\">\n                    {$L('시청중인 영상')}\n                </BodyText>\n\n                <Scroller\n                    horizontalScrollbar=\"auto\" // 가로 스크롤\n                    focusableScrollbar\n                    className={css.horizontalScroller}\n                >\n                <div className={css.videoGrid}>\n                    {watchingVideos.map(renderVideoCard)}\n                </div>\n                </Scroller>\n            </div>\n\n            <div className={css.section}>\n                <BodyText className={css.sectionTitle} size=\"large\">\n                    {$L('추천 영상')}\n                </BodyText>\n                <Scroller\n                    horizontalScrollbar=\"auto\" // 가로 스크롤\n                    focusableScrollbar\n                    className={css.horizontalScroller}\n                >\n                <div className={css.videoGrid}>\n                    {recommendedVideos.map(renderVideoCard)}\n                </div>\n                </Scroller>\n            </div>\n            </Scroller>\n        </Panel>\n    );\n};\n\nexport default Main;*/\n\nimport BodyText from '@enact/sandstone/BodyText';\nimport { Header, Panel } from '@enact/sandstone/Panels';\nimport { useMainState } from './MainState';\nimport SelectableVideoPlayer from './VideoPlayer';\nimport css from './Main.module.less';\nimport $L from '@enact/i18n/$L';\nimport { useState, useEffect, useRef } from 'react';\nimport Scroller from '@enact/sandstone/Scroller';\n\nconst Main = (props) => {\n    const { videoData } = useMainState();\n    const [selectedVideo, setSelectedVideo] = useState(null); // 선택된 비디오 상태\n    const [watchingVideos, setWatchingVideos] = useState(videoData.slice(0, 3)); // 초기 시청 중인 영상\n    const recommendedVideos = videoData.slice(3, 9); // 추천 영상\n\n    const scrollerRef = useRef(null);\n\n    // 무한 스크롤: 가로 스크롤에서 추가 데이터 로드\n    const loadMoreVideos = () => {\n        const currentLength = watchingVideos.length;\n        const newVideos = videoData.slice(currentLength, currentLength + 3);\n        if (newVideos.length > 0) {\n            setWatchingVideos([...watchingVideos, ...newVideos]);\n        }\n    };\n\n    const handleScroll = () => {\n        const scrollerNode = scrollerRef.current.getBoundingClientRect();\n        if (scrollerNode.right <= window.innerWidth + 50) {\n            loadMoreVideos();\n        }\n    };\n\n    const handleVideoClick = (video) => {\n        setSelectedVideo(video);\n    };\n\n    const handleClosePlayer = () => {\n        setSelectedVideo(null);\n    };\n\n    const renderVideoCard = (video) => (\n        <div key={video.id} className={css.videoCard} onClick={() => handleVideoClick(video)}>\n            <img src={video.thumbnail} alt={video.title} className={css.thumbnail} />\n            <BodyText className={css.videoTitle} size=\"medium\">\n                {video.title}\n            </BodyText>\n        </div>\n    );\n\n    useEffect(() => {\n        const scrollerNode = scrollerRef.current;\n        scrollerNode.addEventListener('scroll', handleScroll);\n        return () => {\n            scrollerNode.removeEventListener('scroll', handleScroll);\n        };\n    }, [watchingVideos]);\n\n    return (\n        <Panel {...props}>\n            <Header title={$L('Media Web App')} />\n            <BodyText className={css.description} size=\"large\">\n                {$L('Connected Group 8')}\n            </BodyText>\n\n            {/* 비디오 플레이어 */}\n            {selectedVideo && (\n                <SelectableVideoPlayer video={selectedVideo} onClose={handleClosePlayer} />\n            )}\n\n            {/* 세로 스크롤 */}\n            <Scroller\n                verticalScrollbar=\"auto\"\n                focusableScrollbar\n                disabled={!!selectedVideo}\n            >\n                {/* 시청 중인 영상 */}\n                <div className={css.section}>\n                    <BodyText className={css.sectionTitle} size=\"large\">\n                        {$L('시청중인 영상')}\n                    </BodyText>\n                    <Scroller\n                        ref={scrollerRef}\n                        horizontalScrollbar=\"auto\"\n                        focusableScrollbar\n                        className={css.horizontalScroller}\n                    >\n                        <div className={css.videoGridHorizontal}>\n                            {watchingVideos.map(renderVideoCard)}\n                        </div>\n                    </Scroller>\n                </div>\n\n                {/* 추천 영상 */}\n                <div className={css.section}>\n                    <BodyText className={css.sectionTitle} size=\"large\">\n                        {$L('추천 영상')}\n                    </BodyText>\n                    <Scroller\n                        horizontalScrollbar=\"auto\"\n                        focusableScrollbar\n                        className={css.horizontalScroller}\n                    >\n                        <div className={css.videoGridHorizontal}>\n                            {recommendedVideos.map(renderVideoCard)}\n                        </div>\n                    </Scroller>\n                </div>\n            </Scroller>\n        </Panel>\n    );\n};\n\nexport default Main;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}