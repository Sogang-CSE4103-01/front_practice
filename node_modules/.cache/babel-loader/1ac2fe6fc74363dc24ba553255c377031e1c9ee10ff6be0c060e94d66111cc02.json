{"ast":null,"code":"import LS2Request from '@enact/webos/LS2Request';\nimport { isDevServe } from './utils';\nconst send = (Req, service, callInfo) => {\n  var _callInfo$parameters;\n  if ((_callInfo$parameters = callInfo.parameters) !== null && _callInfo$parameters !== void 0 && _callInfo$parameters.subscribe) {\n    return new Req().send({\n      service,\n      method: callInfo === null || callInfo === void 0 ? void 0 : callInfo.method,\n      parameters: callInfo === null || callInfo === void 0 ? void 0 : callInfo.parameters,\n      onSuccess: callInfo === null || callInfo === void 0 ? void 0 : callInfo.onSuccess,\n      onFailure: callInfo === null || callInfo === void 0 ? void 0 : callInfo.onFailure\n    });\n  }\n  return new Promise((onSuccess, onFailure) => new Req().send({\n    service,\n    method: callInfo === null || callInfo === void 0 ? void 0 : callInfo.method,\n    parameters: callInfo === null || callInfo === void 0 ? void 0 : callInfo.parameters,\n    onSuccess,\n    onFailure\n  }));\n};\nconst request = service => callInfo => {\n  /* istanbul ignore if */\n  if (isDevServe()) {\n    // eslint-disable-next-line\n    const req = require('../../__mocks__/@enact/webos/LS2Request');\n    return send(req.default, service, callInfo);\n  }\n  return send(LS2Request, service, callInfo);\n};\nexport default request;","map":{"version":3,"names":["LS2Request","isDevServe","send","Req","service","callInfo","_callInfo$parameters","parameters","subscribe","method","onSuccess","onFailure","Promise","request","req","require","default"],"sources":["/Users/meogyu/connected_front/src/libs/request.js"],"sourcesContent":["import LS2Request from '@enact/webos/LS2Request';\n\nimport {isDevServe} from './utils';\n\nconst send = (Req, service, callInfo) => {\n\tif (callInfo.parameters?.subscribe) {\n\t\treturn new Req().send({\n\t\t\tservice,\n\t\t\tmethod: callInfo?.method,\n\t\t\tparameters: callInfo?.parameters,\n\t\t\tonSuccess: callInfo?.onSuccess,\n\t\t\tonFailure: callInfo?.onFailure\n\t\t});\n\t}\n\n\treturn new Promise((onSuccess, onFailure) =>\n\t\tnew Req().send({\n\t\t\tservice,\n\t\t\tmethod: callInfo?.method,\n\t\t\tparameters: callInfo?.parameters,\n\t\t\tonSuccess,\n\t\t\tonFailure\n\t\t})\n\t);\n};\n\nconst request = service => callInfo => {\n\t/* istanbul ignore if */\n\tif (isDevServe()) {\n\t\t// eslint-disable-next-line\n\t\tconst req = require('../../__mocks__/@enact/webos/LS2Request');\n\t\treturn send(req.default, service, callInfo);\n\t}\n\n\treturn send(LS2Request, service, callInfo);\n};\n\nexport default request;\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,yBAAyB;AAEhD,SAAQC,UAAU,QAAO,SAAS;AAElC,MAAMC,IAAI,GAAGA,CAACC,GAAG,EAAEC,OAAO,EAAEC,QAAQ,KAAK;EAAA,IAAAC,oBAAA;EACxC,KAAAA,oBAAA,GAAID,QAAQ,CAACE,UAAU,cAAAD,oBAAA,eAAnBA,oBAAA,CAAqBE,SAAS,EAAE;IACnC,OAAO,IAAIL,GAAG,CAAC,CAAC,CAACD,IAAI,CAAC;MACrBE,OAAO;MACPK,MAAM,EAAEJ,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEI,MAAM;MACxBF,UAAU,EAAEF,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEE,UAAU;MAChCG,SAAS,EAAEL,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEK,SAAS;MAC9BC,SAAS,EAAEN,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEM;IACtB,CAAC,CAAC;EACH;EAEA,OAAO,IAAIC,OAAO,CAAC,CAACF,SAAS,EAAEC,SAAS,KACvC,IAAIR,GAAG,CAAC,CAAC,CAACD,IAAI,CAAC;IACdE,OAAO;IACPK,MAAM,EAAEJ,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEI,MAAM;IACxBF,UAAU,EAAEF,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEE,UAAU;IAChCG,SAAS;IACTC;EACD,CAAC,CACF,CAAC;AACF,CAAC;AAED,MAAME,OAAO,GAAGT,OAAO,IAAIC,QAAQ,IAAI;EACtC;EACA,IAAIJ,UAAU,CAAC,CAAC,EAAE;IACjB;IACA,MAAMa,GAAG,GAAGC,OAAO,CAAC,yCAAyC,CAAC;IAC9D,OAAOb,IAAI,CAACY,GAAG,CAACE,OAAO,EAAEZ,OAAO,EAAEC,QAAQ,CAAC;EAC5C;EAEA,OAAOH,IAAI,CAACF,UAAU,EAAEI,OAAO,EAAEC,QAAQ,CAAC;AAC3C,CAAC;AAED,eAAeQ,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}