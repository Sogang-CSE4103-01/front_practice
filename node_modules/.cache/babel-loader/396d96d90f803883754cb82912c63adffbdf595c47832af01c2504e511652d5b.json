{"ast":null,"code":"// src/views/LoginState.js\nimport { useState, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom'; // useNavigate import\nimport debugLog from '../libs/log';\nexport const useLoginState = () => {\n  const [isLoginOpen, setLoginOpen] = useState(false);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const navigate = useNavigate(); // 페이지 이동을 위한 navigate 객체\n\n  const handleLoginOpen = useCallback(() => {\n    setLoginOpen(true);\n  }, []);\n  const handleLoginClose = useCallback(() => {\n    setLoginOpen(false);\n    setUsername('');\n    setPassword('');\n  }, []);\n  const handleUsernameChange = useCallback(e => {\n    console.log(\"Username change detected\");\n    setUsername(e.target.value); // e.target.value 사용\n  }, []);\n  const handlePasswordChange = useCallback(e => {\n    console.log(\"Password change detected\");\n    setPassword(e.target.value); // e.target.value 사용\n  }, []);\n  const handleLogin = useCallback(async () => {\n    debugLog('Attempting login', {\n      username,\n      password\n    });\n    try {\n      const response = await fetch(`http://localhost:8080/api/login?username=${username}&password=${password}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include' // 인증 정보가 포함된 요청을 보낼 때 사용\n      });\n\n      if (!response.ok) {\n        throw new Error('Login failed');\n      }\n      const data = await response.json();\n      debugLog('Login successful', data);\n      handleLoginClose();\n      navigate('/main'); // 로그인 성공 후 메인 페이지로 이동\n    } catch (error) {\n      debugLog('Login failed', error.message);\n    }\n  }, [username, password, handleLoginClose, navigate]);\n  return {\n    isLoginOpen,\n    handleLoginOpen,\n    handleLoginClose,\n    handleLogin,\n    handleUsernameChange,\n    handlePasswordChange,\n    username,\n    password\n  };\n};","map":{"version":3,"names":["useState","useCallback","useNavigate","debugLog","useLoginState","isLoginOpen","setLoginOpen","username","setUsername","password","setPassword","navigate","handleLoginOpen","handleLoginClose","handleUsernameChange","e","console","log","target","value","handlePasswordChange","handleLogin","response","fetch","method","headers","credentials","ok","Error","data","json","error","message"],"sources":["/Users/meogyu/connected_front/src/views/LoginState.js"],"sourcesContent":["// src/views/LoginState.js\nimport { useState, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom'; // useNavigate import\nimport debugLog from '../libs/log';\n\nexport const useLoginState = () => {\n    const [isLoginOpen, setLoginOpen] = useState(false);\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const navigate = useNavigate(); // 페이지 이동을 위한 navigate 객체\n\n    const handleLoginOpen = useCallback(() => {\n        setLoginOpen(true);\n    }, []);\n\n    const handleLoginClose = useCallback(() => {\n        setLoginOpen(false);\n        setUsername('');\n        setPassword('');\n    }, []);\n\n    const handleUsernameChange = useCallback((e) => {\n        console.log(\"Username change detected\");\n        setUsername(e.target.value); // e.target.value 사용\n    }, []);\n\n    const handlePasswordChange = useCallback((e) => {\n        console.log(\"Password change detected\");\n        setPassword(e.target.value); // e.target.value 사용\n    }, []);\n\n    const handleLogin = useCallback(async () => {\n        debugLog('Attempting login', { username, password });\n\n        try {\n            const response = await fetch(`http://localhost:8080/api/login?username=${username}&password=${password}`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                credentials: 'include',  // 인증 정보가 포함된 요청을 보낼 때 사용\n            });\n\n            if (!response.ok) {\n                throw new Error('Login failed');\n            }\n\n            const data = await response.json();\n            debugLog('Login successful', data);\n\n            handleLoginClose();\n            navigate('/main'); // 로그인 성공 후 메인 페이지로 이동\n        } catch (error) {\n            debugLog('Login failed', error.message);\n        }\n    }, [username, password, handleLoginClose, navigate]);\n\n    return {\n        isLoginOpen,\n        handleLoginOpen,\n        handleLoginClose,\n        handleLogin,\n        handleUsernameChange,\n        handlePasswordChange,\n        username,\n        password\n    };\n};\n"],"mappings":"AAAA;AACA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC7C,SAASC,WAAW,QAAQ,kBAAkB,CAAC,CAAC;AAChD,OAAOC,QAAQ,MAAM,aAAa;AAElC,OAAO,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAC/B,MAAM,CAACC,WAAW,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAMW,QAAQ,GAAGT,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEhC,MAAMU,eAAe,GAAGX,WAAW,CAAC,MAAM;IACtCK,YAAY,CAAC,IAAI,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMO,gBAAgB,GAAGZ,WAAW,CAAC,MAAM;IACvCK,YAAY,CAAC,KAAK,CAAC;IACnBE,WAAW,CAAC,EAAE,CAAC;IACfE,WAAW,CAAC,EAAE,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,oBAAoB,GAAGb,WAAW,CAAEc,CAAC,IAAK;IAC5CC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IACvCT,WAAW,CAACO,CAAC,CAACG,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;EACjC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,oBAAoB,GAAGnB,WAAW,CAAEc,CAAC,IAAK;IAC5CC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IACvCP,WAAW,CAACK,CAAC,CAACG,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;EACjC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,WAAW,GAAGpB,WAAW,CAAC,YAAY;IACxCE,QAAQ,CAAC,kBAAkB,EAAE;MAAEI,QAAQ;MAAEE;IAAS,CAAC,CAAC;IAEpD,IAAI;MACA,MAAMa,QAAQ,GAAG,MAAMC,KAAK,CAAE,4CAA2ChB,QAAS,aAAYE,QAAS,EAAC,EAAE;QACtGe,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,WAAW,EAAE,SAAS,CAAG;MAC7B,CAAC,CAAC;;MAEF,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;MACnC;MAEA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClC3B,QAAQ,CAAC,kBAAkB,EAAE0B,IAAI,CAAC;MAElChB,gBAAgB,CAAC,CAAC;MAClBF,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC,OAAOoB,KAAK,EAAE;MACZ5B,QAAQ,CAAC,cAAc,EAAE4B,KAAK,CAACC,OAAO,CAAC;IAC3C;EACJ,CAAC,EAAE,CAACzB,QAAQ,EAAEE,QAAQ,EAAEI,gBAAgB,EAAEF,QAAQ,CAAC,CAAC;EAEpD,OAAO;IACHN,WAAW;IACXO,eAAe;IACfC,gBAAgB;IAChBQ,WAAW;IACXP,oBAAoB;IACpBM,oBAAoB;IACpBb,QAAQ;IACRE;EACJ,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}