{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nexports.usePublicClassNames = usePublicClassNames;\nvar _util = require(\"../util\");\n/**\n * A hook for supporting `publicClassNames` to functional components.\n * It returns merged CSS of given two CSS objects according to `publicClassNames` option.\n *\n * @param   {Object.<string, string>}    [componentCss]     The CSS of the component\n * @param   {Object.<string, string>}    [customCss]        The supplied collection of CSS class names to the\n *                                                          corresponding internal elements and states of the component\n * @param   {Boolean|String|String[]}    [publicClassNames] The keys of public class names of the component\n *                                                          If this value is `true`, all of the keys from the component\n *                                                          CSS will become public class names.\n * @returns {Object}                                        A merged CSS\n * @private\n */\nfunction usePublicClassNames(_ref) {\n  var componentCss = _ref.componentCss,\n    customCss = _ref.customCss,\n    publicClassNames = _ref.publicClassNames;\n  var allowedClassNames = publicClassNames;\n  var mergedCss = componentCss;\n  if (!componentCss || !customCss) {\n    return mergedCss;\n  }\n  if (allowedClassNames === true) {\n    allowedClassNames = Object.keys(componentCss);\n  } else if (typeof allowedClassNames === 'string') {\n    allowedClassNames = allowedClassNames.split(/\\s+/);\n  }\n\n  // if the config includes a css map, merge them together now\n  if (allowedClassNames) {\n    mergedCss = (0, _util.mergeClassNameMaps)(componentCss, customCss, allowedClassNames);\n  }\n  return mergedCss;\n}\nvar _default = exports[\"default\"] = usePublicClassNames;","map":{"version":3,"names":["Object","defineProperty","exports","value","usePublicClassNames","_util","require","_ref","componentCss","customCss","publicClassNames","allowedClassNames","mergedCss","keys","split","mergeClassNameMaps","_default"],"sources":["/home/connected/enact-template/node_modules/@enact/core/usePublicClassNames/usePublicClassNames.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nexports.usePublicClassNames = usePublicClassNames;\nvar _util = require(\"../util\");\n/**\n * A hook for supporting `publicClassNames` to functional components.\n * It returns merged CSS of given two CSS objects according to `publicClassNames` option.\n *\n * @param   {Object.<string, string>}    [componentCss]     The CSS of the component\n * @param   {Object.<string, string>}    [customCss]        The supplied collection of CSS class names to the\n *                                                          corresponding internal elements and states of the component\n * @param   {Boolean|String|String[]}    [publicClassNames] The keys of public class names of the component\n *                                                          If this value is `true`, all of the keys from the component\n *                                                          CSS will become public class names.\n * @returns {Object}                                        A merged CSS\n * @private\n */\nfunction usePublicClassNames(_ref) {\n  var componentCss = _ref.componentCss,\n    customCss = _ref.customCss,\n    publicClassNames = _ref.publicClassNames;\n  var allowedClassNames = publicClassNames;\n  var mergedCss = componentCss;\n  if (!componentCss || !customCss) {\n    return mergedCss;\n  }\n  if (allowedClassNames === true) {\n    allowedClassNames = Object.keys(componentCss);\n  } else if (typeof allowedClassNames === 'string') {\n    allowedClassNames = allowedClassNames.split(/\\s+/);\n  }\n\n  // if the config includes a css map, merge them together now\n  if (allowedClassNames) {\n    mergedCss = (0, _util.mergeClassNameMaps)(componentCss, customCss, allowedClassNames);\n  }\n  return mergedCss;\n}\nvar _default = exports[\"default\"] = usePublicClassNames;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC;AAC3BA,OAAO,CAACE,mBAAmB,GAAGA,mBAAmB;AACjD,IAAIC,KAAK,GAAGC,OAAO,CAAC,SAAS,CAAC;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,mBAAmBA,CAACG,IAAI,EAAE;EACjC,IAAIC,YAAY,GAAGD,IAAI,CAACC,YAAY;IAClCC,SAAS,GAAGF,IAAI,CAACE,SAAS;IAC1BC,gBAAgB,GAAGH,IAAI,CAACG,gBAAgB;EAC1C,IAAIC,iBAAiB,GAAGD,gBAAgB;EACxC,IAAIE,SAAS,GAAGJ,YAAY;EAC5B,IAAI,CAACA,YAAY,IAAI,CAACC,SAAS,EAAE;IAC/B,OAAOG,SAAS;EAClB;EACA,IAAID,iBAAiB,KAAK,IAAI,EAAE;IAC9BA,iBAAiB,GAAGX,MAAM,CAACa,IAAI,CAACL,YAAY,CAAC;EAC/C,CAAC,MAAM,IAAI,OAAOG,iBAAiB,KAAK,QAAQ,EAAE;IAChDA,iBAAiB,GAAGA,iBAAiB,CAACG,KAAK,CAAC,KAAK,CAAC;EACpD;;EAEA;EACA,IAAIH,iBAAiB,EAAE;IACrBC,SAAS,GAAG,CAAC,CAAC,EAAEP,KAAK,CAACU,kBAAkB,EAAEP,YAAY,EAAEC,SAAS,EAAEE,iBAAiB,CAAC;EACvF;EACA,OAAOC,SAAS;AAClB;AACA,IAAII,QAAQ,GAAGd,OAAO,CAAC,SAAS,CAAC,GAAGE,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}