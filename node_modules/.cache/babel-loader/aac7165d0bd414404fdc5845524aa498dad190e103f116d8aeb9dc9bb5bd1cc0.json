{"ast":null,"code":"// src/views/SignupState.js\nimport { useState, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom'; // useHistory를 useNavigate로 변경\nimport debugLog from '../libs/log';\nimport Popup from '@enact/sandstone/Popup';\nexport const useSignupState = () => {\n  const [newusername, setUsername] = useState('');\n  const [newpassword, setPassword] = useState('');\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n  const [popupMessage, setPopupMessage] = useState('');\n  //const navigate = useNavigate(); // 페이지 이동을 위한 navigate 객체\n\n  const handleSignupUsernameChange = useCallback(e => {\n    //const { name, value } = event.target;\n    if (e && e.value !== undefined) {\n      setUsername(e.value); // 사용자 이름 상태 업데이트\n      console.log('sign in : name changed');\n    } else {\n      console.log('handle User name change Sing in erorr');\n    }\n  }, []);\n  const handleSignupPasswordChange = useCallback(e => {\n    if (e && e.value !== undefined) {\n      setPassword(e.value);\n      console.log('sign in : password changed');\n    } else {\n      console.log('handle password change Sing in erorr');\n    }\n  }, []);\n\n  /*\n  const handlePasswordChange = useCallback((e) => {\n  if (e && e.value !== undefined) {\n  setPassword(e.value);\n  } else {\n  console.warn('handlePasswordChange: Invalid event object', e);\n  }\n  }, []);*/\n\n  const handleSignup = useCallback(async () => {\n    debugLog('Attempt Sign In', {\n      newusername,\n      newpassword\n    }); // 디버그 로그 출력\n    //navigate('/login'); // 회원가입 후 로그인 화면으로 이동 (필요에 따라 변경 가능)\n    try {\n      //const response = await fetch('https://cors-anywhere-herokuapp.com/https://connected-backend-yir6.onrender.com/api/register', {\n      const response = await fetch('https://connected-backend-yir6.onrender.com/api/register?username=${username}&password=${password}', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          newusername,\n          newpassword\n        })\n        //credentials : 'include',\n      });\n\n      if (!response.ok) {\n        throw new Error('Sign in failed');\n      }\n      const data = await response.json();\n      debugLog('Sign In successful', data);\n\n      //alert('Sign Up Successful!');\n      setPopupMessage(\"Sign Up Successful!\");\n      //handleLoginClose();\n    } catch (error) {\n      console.error('Sign Up Error : ', error.message);\n      setPopupMessage(\"Sign Up failed!\");\n      //alert(\"Sign Up Failed\");\n    } finally {\n      setIsPopupOpen(true);\n    }\n  }, [newusername, newpassword]);\n  return {\n    newusername,\n    newpassword,\n    handleSignupUsernameChange,\n    handleSignupPasswordChange,\n    handleSignup\n  };\n};","map":{"version":3,"names":["useState","useCallback","useNavigate","debugLog","Popup","useSignupState","newusername","setUsername","newpassword","setPassword","isPopupOpen","setIsPopupOpen","popupMessage","setPopupMessage","handleSignupUsernameChange","e","value","undefined","console","log","handleSignupPasswordChange","handleSignup","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","error","message"],"sources":["/home/connected/enact-template/src/views/SignupState.js"],"sourcesContent":["// src/views/SignupState.js\nimport { useState, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom'; // useHistory를 useNavigate로 변경\nimport debugLog from '../libs/log';\nimport Popup from '@enact/sandstone/Popup';\n\nexport const useSignupState = () => {\n    const [newusername, setUsername] = useState('');\n    const [newpassword, setPassword] = useState('');\n    const [isPopupOpen, setIsPopupOpen] = useState(false);\n    const [popupMessage, setPopupMessage] = useState('');\n    //const navigate = useNavigate(); // 페이지 이동을 위한 navigate 객체\n\n    const handleSignupUsernameChange = useCallback((e) => {\n        //const { name, value } = event.target;\n        if (e && e.value !== undefined) {\n            setUsername(e.value); // 사용자 이름 상태 업데이트\n            console.log('sign in : name changed');\n        } else {\n            console.log('handle User name change Sing in erorr');\n        }\n    }, []);\n\n    const handleSignupPasswordChange = useCallback((e) => {\n\t\tif (e && e.value !== undefined) {\n\t\t\tsetPassword(e.value);\n            console.log('sign in : password changed');\n\t\t} else {\n\t\t\tconsole.log('handle password change Sing in erorr');\n\t\t}\n\t}, []);\n    \n    /*\n    const handlePasswordChange = useCallback((e) => {\n\t\tif (e && e.value !== undefined) {\n\t\t\tsetPassword(e.value);\n\t\t} else {\n\t\t\tconsole.warn('handlePasswordChange: Invalid event object', e);\n\t\t}\n\t}, []);*/\n\n    const handleSignup = useCallback(async () => {\n        debugLog('Attempt Sign In', {newusername, newpassword}); // 디버그 로그 출력\n        //navigate('/login'); // 회원가입 후 로그인 화면으로 이동 (필요에 따라 변경 가능)\n        try{\n            //const response = await fetch('https://cors-anywhere-herokuapp.com/https://connected-backend-yir6.onrender.com/api/register', {\n            const response = await fetch('https://connected-backend-yir6.onrender.com/api/register?username=${username}&password=${password}', {\n                method: 'POST',\n                headers: {\n                    'Content-Type' : 'application/json',\n                },\n                body : JSON.stringify({newusername, newpassword}),\n                //credentials : 'include',\n            });\n            if (!response.ok) {\n\t\t\t\tthrow new Error('Sign in failed');\n\t\t\t}\n            const data = await response.json();\n\t\t\tdebugLog('Sign In successful', data);\n\n            //alert('Sign Up Successful!');\n            setPopupMessage(\"Sign Up Successful!\");\n\t\t\t//handleLoginClose();\n\n        }catch (error){\n            console.error('Sign Up Error : ', error.message);\n            setPopupMessage(\"Sign Up failed!\");\n            //alert(\"Sign Up Failed\");\n        }finally{\n            setIsPopupOpen(true);\n        }\n    \n\n    }, [newusername, newpassword]);\n\n    return { \n        newusername, \n        newpassword, \n        handleSignupUsernameChange, \n        handleSignupPasswordChange,\n        handleSignup };\n};\n"],"mappings":"AAAA;AACA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC7C,SAASC,WAAW,QAAQ,kBAAkB,CAAC,CAAC;AAChD,OAAOC,QAAQ,MAAM,aAAa;AAClC,OAAOC,KAAK,MAAM,wBAAwB;AAE1C,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAChC,MAAM,CAACC,WAAW,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC/C,MAAM,CAACQ,WAAW,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC/C,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACpD;;EAEA,MAAMc,0BAA0B,GAAGb,WAAW,CAAEc,CAAC,IAAK;IAClD;IACA,IAAIA,CAAC,IAAIA,CAAC,CAACC,KAAK,KAAKC,SAAS,EAAE;MAC5BV,WAAW,CAACQ,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC;MACtBE,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IACzC,CAAC,MAAM;MACHD,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;IACxD;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,0BAA0B,GAAGnB,WAAW,CAAEc,CAAC,IAAK;IACxD,IAAIA,CAAC,IAAIA,CAAC,CAACC,KAAK,KAAKC,SAAS,EAAE;MAC/BR,WAAW,CAACM,CAAC,CAACC,KAAK,CAAC;MACXE,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;IACnD,CAAC,MAAM;MACND,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;IACpD;EACD,CAAC,EAAE,EAAE,CAAC;;EAEH;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EAEI,MAAME,YAAY,GAAGpB,WAAW,CAAC,YAAY;IACzCE,QAAQ,CAAC,iBAAiB,EAAE;MAACG,WAAW;MAAEE;IAAW,CAAC,CAAC,CAAC,CAAC;IACzD;IACA,IAAG;MACC;MACA,MAAMc,QAAQ,GAAG,MAAMC,KAAK,CAAC,oGAAoG,EAAE;QAC/HC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAG;QACrB,CAAC;QACDC,IAAI,EAAGC,IAAI,CAACC,SAAS,CAAC;UAACtB,WAAW;UAAEE;QAAW,CAAC;QAChD;MACJ,CAAC,CAAC;;MACF,IAAI,CAACc,QAAQ,CAACO,EAAE,EAAE;QAC1B,MAAM,IAAIC,KAAK,CAAC,gBAAgB,CAAC;MAClC;MACS,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MAC3C7B,QAAQ,CAAC,oBAAoB,EAAE4B,IAAI,CAAC;;MAE3B;MACAlB,eAAe,CAAC,qBAAqB,CAAC;MAC/C;IAEK,CAAC,QAAOoB,KAAK,EAAC;MACVf,OAAO,CAACe,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAACC,OAAO,CAAC;MAChDrB,eAAe,CAAC,iBAAiB,CAAC;MAClC;IACJ,CAAC,SAAO;MACJF,cAAc,CAAC,IAAI,CAAC;IACxB;EAGJ,CAAC,EAAE,CAACL,WAAW,EAAEE,WAAW,CAAC,CAAC;EAE9B,OAAO;IACHF,WAAW;IACXE,WAAW;IACXM,0BAA0B;IAC1BM,0BAA0B;IAC1BC;EAAa,CAAC;AACtB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}