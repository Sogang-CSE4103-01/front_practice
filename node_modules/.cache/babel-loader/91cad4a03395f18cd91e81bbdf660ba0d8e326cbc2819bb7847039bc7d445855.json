{"ast":null,"code":"// src/views/SignupState.js\nimport { useState, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom'; // useHistory를 useNavigate로 변경\nimport debugLog from '../libs/log';\nexport const useSignupState = () => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  //const navigate = useNavigate(); // 페이지 이동을 위한 navigate 객체\n\n  const handleInputChange = useCallback(event => {\n    const {\n      name,\n      value\n    } = event.target;\n    if (name === 'username') {\n      setUsername(value); // 사용자 이름 상태 업데이트\n      console.log('sign in : name changed');\n    } else if (name === 'password') {\n      setPassword(value); // 비밀번호 상태 업데이트\n      console.log('sign in : pw changed');\n    }\n  }, []);\n\n  /*\n  const handlePasswordChange = useCallback((e) => {\n  if (e && e.value !== undefined) {\n  setPassword(e.value);\n  } else {\n  console.warn('handlePasswordChange: Invalid event object', e);\n  }\n  }, []);*/\n\n  const handleSignup = useCallback(async () => {\n    debugLog('Attempt Sign In', {\n      username,\n      password\n    }); // 디버그 로그 출력\n    //navigate('/login'); // 회원가입 후 로그인 화면으로 이동 (필요에 따라 변경 가능)\n    try {\n      const response = await fetch('https://connected-backend-yir6.onrender.com/api/register/username=${username}&password=${password}', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        throw new Error('Sign in failed');\n      }\n      const data = await response.json();\n      debugLog('Sign In successful', data);\n      handleLoginClose();\n    } catch (error) {}\n  }, [username, password, handleSignup]);\n  return {\n    username,\n    password,\n    handleInputChange,\n    handleSignup\n  };\n};","map":{"version":3,"names":["useState","useCallback","useNavigate","debugLog","useSignupState","username","setUsername","password","setPassword","handleInputChange","event","name","value","target","console","log","handleSignup","response","fetch","method","headers","credentials","ok","Error","data","json","handleLoginClose","error"],"sources":["/home/connected/enact-template/src/views/SignupState.js"],"sourcesContent":["// src/views/SignupState.js\nimport { useState, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom'; // useHistory를 useNavigate로 변경\nimport debugLog from '../libs/log';\n\nexport const useSignupState = () => {\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    //const navigate = useNavigate(); // 페이지 이동을 위한 navigate 객체\n\n    const handleInputChange = useCallback((event) => {\n        const { name, value } = event.target;\n        if (name === 'username') {\n            setUsername(value); // 사용자 이름 상태 업데이트\n            console.log('sign in : name changed');\n        } else if (name === 'password') {\n            setPassword(value); // 비밀번호 상태 업데이트\n            console.log('sign in : pw changed');\n        }\n    }, []);\n    \n    /*\n    const handlePasswordChange = useCallback((e) => {\n\t\tif (e && e.value !== undefined) {\n\t\t\tsetPassword(e.value);\n\t\t} else {\n\t\t\tconsole.warn('handlePasswordChange: Invalid event object', e);\n\t\t}\n\t}, []);*/\n\n    const handleSignup = useCallback(async () => {\n        debugLog('Attempt Sign In', {username, password}); // 디버그 로그 출력\n        //navigate('/login'); // 회원가입 후 로그인 화면으로 이동 (필요에 따라 변경 가능)\n        try{\n            const response = await fetch('https://connected-backend-yir6.onrender.com/api/register/username=${username}&password=${password}', {\n            method: 'POST',\n            headers: {\n                'Content-Type' : 'application/json',\n            },\n            credentials : 'include',\n            });\n            if (!response.ok) {\n\t\t\t\tthrow new Error('Sign in failed');\n\t\t\t}\n            const data = await response.json();\n\t\t\tdebugLog('Sign In successful', data);\n\t\t\thandleLoginClose();\n\n        }catch (error){\n\n        }\n    \n\n    }, [username, password, handleSignup]);\n\n    return { \n        username, \n        password, \n        handleInputChange, \n        handleSignup };\n};\n"],"mappings":"AAAA;AACA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC7C,SAASC,WAAW,QAAQ,kBAAkB,CAAC,CAAC;AAChD,OAAOC,QAAQ,MAAM,aAAa;AAElC,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAChC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C;;EAEA,MAAMS,iBAAiB,GAAGR,WAAW,CAAES,KAAK,IAAK;IAC7C,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,KAAK,CAACG,MAAM;IACpC,IAAIF,IAAI,KAAK,UAAU,EAAE;MACrBL,WAAW,CAACM,KAAK,CAAC,CAAC,CAAC;MACpBE,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IACzC,CAAC,MAAM,IAAIJ,IAAI,KAAK,UAAU,EAAE;MAC5BH,WAAW,CAACI,KAAK,CAAC,CAAC,CAAC;MACpBE,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACvC;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EAEI,MAAMC,YAAY,GAAGf,WAAW,CAAC,YAAY;IACzCE,QAAQ,CAAC,iBAAiB,EAAE;MAACE,QAAQ;MAAEE;IAAQ,CAAC,CAAC,CAAC,CAAC;IACnD;IACA,IAAG;MACC,MAAMU,QAAQ,GAAG,MAAMC,KAAK,CAAC,oGAAoG,EAAE;QACnIC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAG;QACrB,CAAC;QACDC,WAAW,EAAG;MACd,CAAC,CAAC;MACF,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE;QAC1B,MAAM,IAAIC,KAAK,CAAC,gBAAgB,CAAC;MAClC;MACS,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAC3CtB,QAAQ,CAAC,oBAAoB,EAAEqB,IAAI,CAAC;MACpCE,gBAAgB,CAAC,CAAC;IAEb,CAAC,QAAOC,KAAK,EAAC,CAEd;EAGJ,CAAC,EAAE,CAACtB,QAAQ,EAAEE,QAAQ,EAAES,YAAY,CAAC,CAAC;EAEtC,OAAO;IACHX,QAAQ;IACRE,QAAQ;IACRE,iBAAiB;IACjBO;EAAa,CAAC;AACtB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}